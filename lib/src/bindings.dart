// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libexpat.github.io
class LibExpat {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibExpat(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void XML_SetElementDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_ElementDeclHandler>> eldecl,
  ) {
    _XML_SetElementDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetElementDeclHandler,
        _dart_XML_SetElementDeclHandler>('XML_SetElementDeclHandler');
    return _XML_SetElementDeclHandler(
      parser,
      eldecl,
    );
  }

  _dart_XML_SetElementDeclHandler _XML_SetElementDeclHandler;

  void XML_SetAttlistDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_AttlistDeclHandler>> attdecl,
  ) {
    _XML_SetAttlistDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetAttlistDeclHandler,
        _dart_XML_SetAttlistDeclHandler>('XML_SetAttlistDeclHandler');
    return _XML_SetAttlistDeclHandler(
      parser,
      attdecl,
    );
  }

  _dart_XML_SetAttlistDeclHandler _XML_SetAttlistDeclHandler;

  void XML_SetXmlDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_XmlDeclHandler>> xmldecl,
  ) {
    _XML_SetXmlDeclHandler ??= _dylib.lookupFunction<_c_XML_SetXmlDeclHandler,
        _dart_XML_SetXmlDeclHandler>('XML_SetXmlDeclHandler');
    return _XML_SetXmlDeclHandler(
      parser,
      xmldecl,
    );
  }

  _dart_XML_SetXmlDeclHandler _XML_SetXmlDeclHandler;

  ffi.Pointer<XML_ParserStruct> XML_ParserCreate(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    _XML_ParserCreate ??=
        _dylib.lookupFunction<_c_XML_ParserCreate, _dart_XML_ParserCreate>(
            'XML_ParserCreate');
    return _XML_ParserCreate(
      encoding,
    );
  }

  _dart_XML_ParserCreate _XML_ParserCreate;

  ffi.Pointer<XML_ParserStruct> XML_ParserCreateNS(
    ffi.Pointer<ffi.Int8> encoding,
    int namespaceSeparator,
  ) {
    _XML_ParserCreateNS ??=
        _dylib.lookupFunction<_c_XML_ParserCreateNS, _dart_XML_ParserCreateNS>(
            'XML_ParserCreateNS');
    return _XML_ParserCreateNS(
      encoding,
      namespaceSeparator,
    );
  }

  _dart_XML_ParserCreateNS _XML_ParserCreateNS;

  ffi.Pointer<XML_ParserStruct> XML_ParserCreate_MM(
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<XML_Memory_Handling_Suite> memsuite,
    ffi.Pointer<ffi.Int8> namespaceSeparator,
  ) {
    _XML_ParserCreate_MM ??= _dylib.lookupFunction<_c_XML_ParserCreate_MM,
        _dart_XML_ParserCreate_MM>('XML_ParserCreate_MM');
    return _XML_ParserCreate_MM(
      encoding,
      memsuite,
      namespaceSeparator,
    );
  }

  _dart_XML_ParserCreate_MM _XML_ParserCreate_MM;

  int XML_ParserReset(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    _XML_ParserReset ??=
        _dylib.lookupFunction<_c_XML_ParserReset, _dart_XML_ParserReset>(
            'XML_ParserReset');
    return _XML_ParserReset(
      parser,
      encoding,
    );
  }

  _dart_XML_ParserReset _XML_ParserReset;

  void XML_SetEntityDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_EntityDeclHandler>> handler,
  ) {
    _XML_SetEntityDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetEntityDeclHandler,
        _dart_XML_SetEntityDeclHandler>('XML_SetEntityDeclHandler');
    return _XML_SetEntityDeclHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetEntityDeclHandler _XML_SetEntityDeclHandler;

  void XML_SetElementHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> start,
    ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> end,
  ) {
    _XML_SetElementHandler ??= _dylib.lookupFunction<_c_XML_SetElementHandler,
        _dart_XML_SetElementHandler>('XML_SetElementHandler');
    return _XML_SetElementHandler(
      parser,
      start,
      end,
    );
  }

  _dart_XML_SetElementHandler _XML_SetElementHandler;

  void XML_SetStartElementHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> handler,
  ) {
    _XML_SetStartElementHandler ??= _dylib.lookupFunction<
        _c_XML_SetStartElementHandler,
        _dart_XML_SetStartElementHandler>('XML_SetStartElementHandler');
    return _XML_SetStartElementHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetStartElementHandler _XML_SetStartElementHandler;

  void XML_SetEndElementHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> handler,
  ) {
    _XML_SetEndElementHandler ??= _dylib.lookupFunction<
        _c_XML_SetEndElementHandler,
        _dart_XML_SetEndElementHandler>('XML_SetEndElementHandler');
    return _XML_SetEndElementHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetEndElementHandler _XML_SetEndElementHandler;

  void XML_SetCharacterDataHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_CharacterDataHandler>> handler,
  ) {
    _XML_SetCharacterDataHandler ??= _dylib.lookupFunction<
        _c_XML_SetCharacterDataHandler,
        _dart_XML_SetCharacterDataHandler>('XML_SetCharacterDataHandler');
    return _XML_SetCharacterDataHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetCharacterDataHandler _XML_SetCharacterDataHandler;

  void XML_SetProcessingInstructionHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_ProcessingInstructionHandler>> handler,
  ) {
    _XML_SetProcessingInstructionHandler ??= _dylib.lookupFunction<
            _c_XML_SetProcessingInstructionHandler,
            _dart_XML_SetProcessingInstructionHandler>(
        'XML_SetProcessingInstructionHandler');
    return _XML_SetProcessingInstructionHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetProcessingInstructionHandler
      _XML_SetProcessingInstructionHandler;

  void XML_SetCommentHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_CommentHandler>> handler,
  ) {
    _XML_SetCommentHandler ??= _dylib.lookupFunction<_c_XML_SetCommentHandler,
        _dart_XML_SetCommentHandler>('XML_SetCommentHandler');
    return _XML_SetCommentHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetCommentHandler _XML_SetCommentHandler;

  void XML_SetCdataSectionHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
    ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
  ) {
    _XML_SetCdataSectionHandler ??= _dylib.lookupFunction<
        _c_XML_SetCdataSectionHandler,
        _dart_XML_SetCdataSectionHandler>('XML_SetCdataSectionHandler');
    return _XML_SetCdataSectionHandler(
      parser,
      start,
      end,
    );
  }

  _dart_XML_SetCdataSectionHandler _XML_SetCdataSectionHandler;

  void XML_SetStartCdataSectionHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
  ) {
    _XML_SetStartCdataSectionHandler ??= _dylib.lookupFunction<
            _c_XML_SetStartCdataSectionHandler,
            _dart_XML_SetStartCdataSectionHandler>(
        'XML_SetStartCdataSectionHandler');
    return _XML_SetStartCdataSectionHandler(
      parser,
      start,
    );
  }

  _dart_XML_SetStartCdataSectionHandler _XML_SetStartCdataSectionHandler;

  void XML_SetEndCdataSectionHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
  ) {
    _XML_SetEndCdataSectionHandler ??= _dylib.lookupFunction<
        _c_XML_SetEndCdataSectionHandler,
        _dart_XML_SetEndCdataSectionHandler>('XML_SetEndCdataSectionHandler');
    return _XML_SetEndCdataSectionHandler(
      parser,
      end,
    );
  }

  _dart_XML_SetEndCdataSectionHandler _XML_SetEndCdataSectionHandler;

  void XML_SetDefaultHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
  ) {
    _XML_SetDefaultHandler ??= _dylib.lookupFunction<_c_XML_SetDefaultHandler,
        _dart_XML_SetDefaultHandler>('XML_SetDefaultHandler');
    return _XML_SetDefaultHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetDefaultHandler _XML_SetDefaultHandler;

  void XML_SetDefaultHandlerExpand(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
  ) {
    _XML_SetDefaultHandlerExpand ??= _dylib.lookupFunction<
        _c_XML_SetDefaultHandlerExpand,
        _dart_XML_SetDefaultHandlerExpand>('XML_SetDefaultHandlerExpand');
    return _XML_SetDefaultHandlerExpand(
      parser,
      handler,
    );
  }

  _dart_XML_SetDefaultHandlerExpand _XML_SetDefaultHandlerExpand;

  void XML_SetDoctypeDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
    ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
  ) {
    _XML_SetDoctypeDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetDoctypeDeclHandler,
        _dart_XML_SetDoctypeDeclHandler>('XML_SetDoctypeDeclHandler');
    return _XML_SetDoctypeDeclHandler(
      parser,
      start,
      end,
    );
  }

  _dart_XML_SetDoctypeDeclHandler _XML_SetDoctypeDeclHandler;

  void XML_SetStartDoctypeDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
  ) {
    _XML_SetStartDoctypeDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetStartDoctypeDeclHandler,
        _dart_XML_SetStartDoctypeDeclHandler>('XML_SetStartDoctypeDeclHandler');
    return _XML_SetStartDoctypeDeclHandler(
      parser,
      start,
    );
  }

  _dart_XML_SetStartDoctypeDeclHandler _XML_SetStartDoctypeDeclHandler;

  void XML_SetEndDoctypeDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
  ) {
    _XML_SetEndDoctypeDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetEndDoctypeDeclHandler,
        _dart_XML_SetEndDoctypeDeclHandler>('XML_SetEndDoctypeDeclHandler');
    return _XML_SetEndDoctypeDeclHandler(
      parser,
      end,
    );
  }

  _dart_XML_SetEndDoctypeDeclHandler _XML_SetEndDoctypeDeclHandler;

  void XML_SetUnparsedEntityDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_UnparsedEntityDeclHandler>> handler,
  ) {
    _XML_SetUnparsedEntityDeclHandler ??= _dylib.lookupFunction<
            _c_XML_SetUnparsedEntityDeclHandler,
            _dart_XML_SetUnparsedEntityDeclHandler>(
        'XML_SetUnparsedEntityDeclHandler');
    return _XML_SetUnparsedEntityDeclHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetUnparsedEntityDeclHandler _XML_SetUnparsedEntityDeclHandler;

  void XML_SetNotationDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_NotationDeclHandler>> handler,
  ) {
    _XML_SetNotationDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetNotationDeclHandler,
        _dart_XML_SetNotationDeclHandler>('XML_SetNotationDeclHandler');
    return _XML_SetNotationDeclHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetNotationDeclHandler _XML_SetNotationDeclHandler;

  void XML_SetNamespaceDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
    ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
  ) {
    _XML_SetNamespaceDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetNamespaceDeclHandler,
        _dart_XML_SetNamespaceDeclHandler>('XML_SetNamespaceDeclHandler');
    return _XML_SetNamespaceDeclHandler(
      parser,
      start,
      end,
    );
  }

  _dart_XML_SetNamespaceDeclHandler _XML_SetNamespaceDeclHandler;

  void XML_SetStartNamespaceDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
  ) {
    _XML_SetStartNamespaceDeclHandler ??= _dylib.lookupFunction<
            _c_XML_SetStartNamespaceDeclHandler,
            _dart_XML_SetStartNamespaceDeclHandler>(
        'XML_SetStartNamespaceDeclHandler');
    return _XML_SetStartNamespaceDeclHandler(
      parser,
      start,
    );
  }

  _dart_XML_SetStartNamespaceDeclHandler _XML_SetStartNamespaceDeclHandler;

  void XML_SetEndNamespaceDeclHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
  ) {
    _XML_SetEndNamespaceDeclHandler ??= _dylib.lookupFunction<
        _c_XML_SetEndNamespaceDeclHandler,
        _dart_XML_SetEndNamespaceDeclHandler>('XML_SetEndNamespaceDeclHandler');
    return _XML_SetEndNamespaceDeclHandler(
      parser,
      end,
    );
  }

  _dart_XML_SetEndNamespaceDeclHandler _XML_SetEndNamespaceDeclHandler;

  void XML_SetNotStandaloneHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_NotStandaloneHandler>> handler,
  ) {
    _XML_SetNotStandaloneHandler ??= _dylib.lookupFunction<
        _c_XML_SetNotStandaloneHandler,
        _dart_XML_SetNotStandaloneHandler>('XML_SetNotStandaloneHandler');
    return _XML_SetNotStandaloneHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetNotStandaloneHandler _XML_SetNotStandaloneHandler;

  void XML_SetExternalEntityRefHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_ExternalEntityRefHandler>> handler,
  ) {
    _XML_SetExternalEntityRefHandler ??= _dylib.lookupFunction<
            _c_XML_SetExternalEntityRefHandler,
            _dart_XML_SetExternalEntityRefHandler>(
        'XML_SetExternalEntityRefHandler');
    return _XML_SetExternalEntityRefHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetExternalEntityRefHandler _XML_SetExternalEntityRefHandler;

  void XML_SetExternalEntityRefHandlerArg(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Void> arg,
  ) {
    _XML_SetExternalEntityRefHandlerArg ??= _dylib.lookupFunction<
            _c_XML_SetExternalEntityRefHandlerArg,
            _dart_XML_SetExternalEntityRefHandlerArg>(
        'XML_SetExternalEntityRefHandlerArg');
    return _XML_SetExternalEntityRefHandlerArg(
      parser,
      arg,
    );
  }

  _dart_XML_SetExternalEntityRefHandlerArg _XML_SetExternalEntityRefHandlerArg;

  void XML_SetSkippedEntityHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_SkippedEntityHandler>> handler,
  ) {
    _XML_SetSkippedEntityHandler ??= _dylib.lookupFunction<
        _c_XML_SetSkippedEntityHandler,
        _dart_XML_SetSkippedEntityHandler>('XML_SetSkippedEntityHandler');
    return _XML_SetSkippedEntityHandler(
      parser,
      handler,
    );
  }

  _dart_XML_SetSkippedEntityHandler _XML_SetSkippedEntityHandler;

  void XML_SetUnknownEncodingHandler(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.NativeFunction<XML_UnknownEncodingHandler>> handler,
    ffi.Pointer<ffi.Void> encodingHandlerData,
  ) {
    _XML_SetUnknownEncodingHandler ??= _dylib.lookupFunction<
        _c_XML_SetUnknownEncodingHandler,
        _dart_XML_SetUnknownEncodingHandler>('XML_SetUnknownEncodingHandler');
    return _XML_SetUnknownEncodingHandler(
      parser,
      handler,
      encodingHandlerData,
    );
  }

  _dart_XML_SetUnknownEncodingHandler _XML_SetUnknownEncodingHandler;

  void XML_DefaultCurrent(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_DefaultCurrent ??=
        _dylib.lookupFunction<_c_XML_DefaultCurrent, _dart_XML_DefaultCurrent>(
            'XML_DefaultCurrent');
    return _XML_DefaultCurrent(
      parser,
    );
  }

  _dart_XML_DefaultCurrent _XML_DefaultCurrent;

  void XML_SetReturnNSTriplet(
    ffi.Pointer<XML_ParserStruct> parser,
    int do_nst,
  ) {
    _XML_SetReturnNSTriplet ??= _dylib.lookupFunction<_c_XML_SetReturnNSTriplet,
        _dart_XML_SetReturnNSTriplet>('XML_SetReturnNSTriplet');
    return _XML_SetReturnNSTriplet(
      parser,
      do_nst,
    );
  }

  _dart_XML_SetReturnNSTriplet _XML_SetReturnNSTriplet;

  void XML_SetUserData(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Void> userData,
  ) {
    _XML_SetUserData ??=
        _dylib.lookupFunction<_c_XML_SetUserData, _dart_XML_SetUserData>(
            'XML_SetUserData');
    return _XML_SetUserData(
      parser,
      userData,
    );
  }

  _dart_XML_SetUserData _XML_SetUserData;

  int XML_SetEncoding(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    _XML_SetEncoding ??=
        _dylib.lookupFunction<_c_XML_SetEncoding, _dart_XML_SetEncoding>(
            'XML_SetEncoding');
    return _XML_SetEncoding(
      parser,
      encoding,
    );
  }

  _dart_XML_SetEncoding _XML_SetEncoding;

  void XML_UseParserAsHandlerArg(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_UseParserAsHandlerArg ??= _dylib.lookupFunction<
        _c_XML_UseParserAsHandlerArg,
        _dart_XML_UseParserAsHandlerArg>('XML_UseParserAsHandlerArg');
    return _XML_UseParserAsHandlerArg(
      parser,
    );
  }

  _dart_XML_UseParserAsHandlerArg _XML_UseParserAsHandlerArg;

  int XML_UseForeignDTD(
    ffi.Pointer<XML_ParserStruct> parser,
    int useDTD,
  ) {
    _XML_UseForeignDTD ??=
        _dylib.lookupFunction<_c_XML_UseForeignDTD, _dart_XML_UseForeignDTD>(
            'XML_UseForeignDTD');
    return _XML_UseForeignDTD(
      parser,
      useDTD,
    );
  }

  _dart_XML_UseForeignDTD _XML_UseForeignDTD;

  int XML_SetBase(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int8> base,
  ) {
    _XML_SetBase ??=
        _dylib.lookupFunction<_c_XML_SetBase, _dart_XML_SetBase>('XML_SetBase');
    return _XML_SetBase(
      parser,
      base,
    );
  }

  _dart_XML_SetBase _XML_SetBase;

  ffi.Pointer<ffi.Int8> XML_GetBase(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetBase ??=
        _dylib.lookupFunction<_c_XML_GetBase, _dart_XML_GetBase>('XML_GetBase');
    return _XML_GetBase(
      parser,
    );
  }

  _dart_XML_GetBase _XML_GetBase;

  int XML_GetSpecifiedAttributeCount(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetSpecifiedAttributeCount ??= _dylib.lookupFunction<
        _c_XML_GetSpecifiedAttributeCount,
        _dart_XML_GetSpecifiedAttributeCount>('XML_GetSpecifiedAttributeCount');
    return _XML_GetSpecifiedAttributeCount(
      parser,
    );
  }

  _dart_XML_GetSpecifiedAttributeCount _XML_GetSpecifiedAttributeCount;

  int XML_GetIdAttributeIndex(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetIdAttributeIndex ??= _dylib.lookupFunction<
        _c_XML_GetIdAttributeIndex,
        _dart_XML_GetIdAttributeIndex>('XML_GetIdAttributeIndex');
    return _XML_GetIdAttributeIndex(
      parser,
    );
  }

  _dart_XML_GetIdAttributeIndex _XML_GetIdAttributeIndex;

  int XML_Parse(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int8> s,
    int len,
    int isFinal,
  ) {
    _XML_Parse ??=
        _dylib.lookupFunction<_c_XML_Parse, _dart_XML_Parse>('XML_Parse');
    return _XML_Parse(
      parser,
      s,
      len,
      isFinal,
    );
  }

  _dart_XML_Parse _XML_Parse;

  ffi.Pointer<ffi.Void> XML_GetBuffer(
    ffi.Pointer<XML_ParserStruct> parser,
    int len,
  ) {
    _XML_GetBuffer ??= _dylib
        .lookupFunction<_c_XML_GetBuffer, _dart_XML_GetBuffer>('XML_GetBuffer');
    return _XML_GetBuffer(
      parser,
      len,
    );
  }

  _dart_XML_GetBuffer _XML_GetBuffer;

  int XML_ParseBuffer(
    ffi.Pointer<XML_ParserStruct> parser,
    int len,
    int isFinal,
  ) {
    _XML_ParseBuffer ??=
        _dylib.lookupFunction<_c_XML_ParseBuffer, _dart_XML_ParseBuffer>(
            'XML_ParseBuffer');
    return _XML_ParseBuffer(
      parser,
      len,
      isFinal,
    );
  }

  _dart_XML_ParseBuffer _XML_ParseBuffer;

  int XML_StopParser(
    ffi.Pointer<XML_ParserStruct> parser,
    int resumable,
  ) {
    _XML_StopParser ??=
        _dylib.lookupFunction<_c_XML_StopParser, _dart_XML_StopParser>(
            'XML_StopParser');
    return _XML_StopParser(
      parser,
      resumable,
    );
  }

  _dart_XML_StopParser _XML_StopParser;

  int XML_ResumeParser(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_ResumeParser ??=
        _dylib.lookupFunction<_c_XML_ResumeParser, _dart_XML_ResumeParser>(
            'XML_ResumeParser');
    return _XML_ResumeParser(
      parser,
    );
  }

  _dart_XML_ResumeParser _XML_ResumeParser;

  void XML_GetParsingStatus(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<XML_ParsingStatus> status,
  ) {
    _XML_GetParsingStatus ??= _dylib.lookupFunction<_c_XML_GetParsingStatus,
        _dart_XML_GetParsingStatus>('XML_GetParsingStatus');
    return _XML_GetParsingStatus(
      parser,
      status,
    );
  }

  _dart_XML_GetParsingStatus _XML_GetParsingStatus;

  ffi.Pointer<XML_ParserStruct> XML_ExternalEntityParserCreate(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int8> context,
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    _XML_ExternalEntityParserCreate ??= _dylib.lookupFunction<
        _c_XML_ExternalEntityParserCreate,
        _dart_XML_ExternalEntityParserCreate>('XML_ExternalEntityParserCreate');
    return _XML_ExternalEntityParserCreate(
      parser,
      context,
      encoding,
    );
  }

  _dart_XML_ExternalEntityParserCreate _XML_ExternalEntityParserCreate;

  int XML_SetParamEntityParsing(
    ffi.Pointer<XML_ParserStruct> parser,
    int parsing,
  ) {
    _XML_SetParamEntityParsing ??= _dylib.lookupFunction<
        _c_XML_SetParamEntityParsing,
        _dart_XML_SetParamEntityParsing>('XML_SetParamEntityParsing');
    return _XML_SetParamEntityParsing(
      parser,
      parsing,
    );
  }

  _dart_XML_SetParamEntityParsing _XML_SetParamEntityParsing;

  int XML_SetHashSalt(
    ffi.Pointer<XML_ParserStruct> parser,
    int hash_salt,
  ) {
    _XML_SetHashSalt ??=
        _dylib.lookupFunction<_c_XML_SetHashSalt, _dart_XML_SetHashSalt>(
            'XML_SetHashSalt');
    return _XML_SetHashSalt(
      parser,
      hash_salt,
    );
  }

  _dart_XML_SetHashSalt _XML_SetHashSalt;

  int XML_GetErrorCode(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetErrorCode ??=
        _dylib.lookupFunction<_c_XML_GetErrorCode, _dart_XML_GetErrorCode>(
            'XML_GetErrorCode');
    return _XML_GetErrorCode(
      parser,
    );
  }

  _dart_XML_GetErrorCode _XML_GetErrorCode;

  int XML_GetCurrentLineNumber(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetCurrentLineNumber ??= _dylib.lookupFunction<
        _c_XML_GetCurrentLineNumber,
        _dart_XML_GetCurrentLineNumber>('XML_GetCurrentLineNumber');
    return _XML_GetCurrentLineNumber(
      parser,
    );
  }

  _dart_XML_GetCurrentLineNumber _XML_GetCurrentLineNumber;

  int XML_GetCurrentColumnNumber(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetCurrentColumnNumber ??= _dylib.lookupFunction<
        _c_XML_GetCurrentColumnNumber,
        _dart_XML_GetCurrentColumnNumber>('XML_GetCurrentColumnNumber');
    return _XML_GetCurrentColumnNumber(
      parser,
    );
  }

  _dart_XML_GetCurrentColumnNumber _XML_GetCurrentColumnNumber;

  int XML_GetCurrentByteIndex(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetCurrentByteIndex ??= _dylib.lookupFunction<
        _c_XML_GetCurrentByteIndex,
        _dart_XML_GetCurrentByteIndex>('XML_GetCurrentByteIndex');
    return _XML_GetCurrentByteIndex(
      parser,
    );
  }

  _dart_XML_GetCurrentByteIndex _XML_GetCurrentByteIndex;

  int XML_GetCurrentByteCount(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_GetCurrentByteCount ??= _dylib.lookupFunction<
        _c_XML_GetCurrentByteCount,
        _dart_XML_GetCurrentByteCount>('XML_GetCurrentByteCount');
    return _XML_GetCurrentByteCount(
      parser,
    );
  }

  _dart_XML_GetCurrentByteCount _XML_GetCurrentByteCount;

  ffi.Pointer<ffi.Int8> XML_GetInputContext(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Int32> offset,
    ffi.Pointer<ffi.Int32> size,
  ) {
    _XML_GetInputContext ??= _dylib.lookupFunction<_c_XML_GetInputContext,
        _dart_XML_GetInputContext>('XML_GetInputContext');
    return _XML_GetInputContext(
      parser,
      offset,
      size,
    );
  }

  _dart_XML_GetInputContext _XML_GetInputContext;

  void XML_FreeContentModel(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<XML_cp> model,
  ) {
    _XML_FreeContentModel ??= _dylib.lookupFunction<_c_XML_FreeContentModel,
        _dart_XML_FreeContentModel>('XML_FreeContentModel');
    return _XML_FreeContentModel(
      parser,
      model,
    );
  }

  _dart_XML_FreeContentModel _XML_FreeContentModel;

  ffi.Pointer<ffi.Void> XML_MemMalloc(
    ffi.Pointer<XML_ParserStruct> parser,
    int size,
  ) {
    _XML_MemMalloc ??= _dylib
        .lookupFunction<_c_XML_MemMalloc, _dart_XML_MemMalloc>('XML_MemMalloc');
    return _XML_MemMalloc(
      parser,
      size,
    );
  }

  _dart_XML_MemMalloc _XML_MemMalloc;

  ffi.Pointer<ffi.Void> XML_MemRealloc(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    _XML_MemRealloc ??=
        _dylib.lookupFunction<_c_XML_MemRealloc, _dart_XML_MemRealloc>(
            'XML_MemRealloc');
    return _XML_MemRealloc(
      parser,
      ptr,
      size,
    );
  }

  _dart_XML_MemRealloc _XML_MemRealloc;

  void XML_MemFree(
    ffi.Pointer<XML_ParserStruct> parser,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    _XML_MemFree ??=
        _dylib.lookupFunction<_c_XML_MemFree, _dart_XML_MemFree>('XML_MemFree');
    return _XML_MemFree(
      parser,
      ptr,
    );
  }

  _dart_XML_MemFree _XML_MemFree;

  void XML_ParserFree(
    ffi.Pointer<XML_ParserStruct> parser,
  ) {
    _XML_ParserFree ??=
        _dylib.lookupFunction<_c_XML_ParserFree, _dart_XML_ParserFree>(
            'XML_ParserFree');
    return _XML_ParserFree(
      parser,
    );
  }

  _dart_XML_ParserFree _XML_ParserFree;

  ffi.Pointer<ffi.Int8> XML_ErrorString(
    int code,
  ) {
    _XML_ErrorString ??=
        _dylib.lookupFunction<_c_XML_ErrorString, _dart_XML_ErrorString>(
            'XML_ErrorString');
    return _XML_ErrorString(
      code,
    );
  }

  _dart_XML_ErrorString _XML_ErrorString;

  ffi.Pointer<ffi.Int8> XML_ExpatVersion() {
    _XML_ExpatVersion ??=
        _dylib.lookupFunction<_c_XML_ExpatVersion, _dart_XML_ExpatVersion>(
            'XML_ExpatVersion');
    return _XML_ExpatVersion();
  }

  _dart_XML_ExpatVersion _XML_ExpatVersion;

  ffi.Pointer<XML_Feature> XML_GetFeatureList() {
    _XML_GetFeatureList ??=
        _dylib.lookupFunction<_c_XML_GetFeatureList, _dart_XML_GetFeatureList>(
            'XML_GetFeatureList');
    return _XML_GetFeatureList();
  }

  _dart_XML_GetFeatureList _XML_GetFeatureList;
}

class XML_ParserStruct extends ffi.Struct {}

abstract class XML_Status {
  static const int XML_STATUS_ERROR = 0;
  static const int XML_STATUS_OK = 1;
  static const int XML_STATUS_SUSPENDED = 2;
}

abstract class XML_Error {
  static const int XML_ERROR_NONE = 0;
  static const int XML_ERROR_NO_MEMORY = 1;
  static const int XML_ERROR_SYNTAX = 2;
  static const int XML_ERROR_NO_ELEMENTS = 3;
  static const int XML_ERROR_INVALID_TOKEN = 4;
  static const int XML_ERROR_UNCLOSED_TOKEN = 5;
  static const int XML_ERROR_PARTIAL_CHAR = 6;
  static const int XML_ERROR_TAG_MISMATCH = 7;
  static const int XML_ERROR_DUPLICATE_ATTRIBUTE = 8;
  static const int XML_ERROR_JUNK_AFTER_DOC_ELEMENT = 9;
  static const int XML_ERROR_PARAM_ENTITY_REF = 10;
  static const int XML_ERROR_UNDEFINED_ENTITY = 11;
  static const int XML_ERROR_RECURSIVE_ENTITY_REF = 12;
  static const int XML_ERROR_ASYNC_ENTITY = 13;
  static const int XML_ERROR_BAD_CHAR_REF = 14;
  static const int XML_ERROR_BINARY_ENTITY_REF = 15;
  static const int XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF = 16;
  static const int XML_ERROR_MISPLACED_XML_PI = 17;
  static const int XML_ERROR_UNKNOWN_ENCODING = 18;
  static const int XML_ERROR_INCORRECT_ENCODING = 19;
  static const int XML_ERROR_UNCLOSED_CDATA_SECTION = 20;
  static const int XML_ERROR_EXTERNAL_ENTITY_HANDLING = 21;
  static const int XML_ERROR_NOT_STANDALONE = 22;
  static const int XML_ERROR_UNEXPECTED_STATE = 23;
  static const int XML_ERROR_ENTITY_DECLARED_IN_PE = 24;
  static const int XML_ERROR_FEATURE_REQUIRES_XML_DTD = 25;
  static const int XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING = 26;
  static const int XML_ERROR_UNBOUND_PREFIX = 27;
  static const int XML_ERROR_UNDECLARING_PREFIX = 28;
  static const int XML_ERROR_INCOMPLETE_PE = 29;
  static const int XML_ERROR_XML_DECL = 30;
  static const int XML_ERROR_TEXT_DECL = 31;
  static const int XML_ERROR_PUBLICID = 32;
  static const int XML_ERROR_SUSPENDED = 33;
  static const int XML_ERROR_NOT_SUSPENDED = 34;
  static const int XML_ERROR_ABORTED = 35;
  static const int XML_ERROR_FINISHED = 36;
  static const int XML_ERROR_SUSPEND_PE = 37;
  static const int XML_ERROR_RESERVED_PREFIX_XML = 38;
  static const int XML_ERROR_RESERVED_PREFIX_XMLNS = 39;
  static const int XML_ERROR_RESERVED_NAMESPACE_URI = 40;
  static const int XML_ERROR_INVALID_ARGUMENT = 41;
}

abstract class XML_Content_Type {
  static const int XML_CTYPE_EMPTY = 1;
  static const int XML_CTYPE_ANY = 2;
  static const int XML_CTYPE_MIXED = 3;
  static const int XML_CTYPE_NAME = 4;
  static const int XML_CTYPE_CHOICE = 5;
  static const int XML_CTYPE_SEQ = 6;
}

abstract class XML_Content_Quant {
  static const int XML_CQUANT_NONE = 0;
  static const int XML_CQUANT_OPT = 1;
  static const int XML_CQUANT_REP = 2;
  static const int XML_CQUANT_PLUS = 3;
}

class XML_cp extends ffi.Struct {}

class XML_Memory_Handling_Suite extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> malloc_fcn;

  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> realloc_fcn;

  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> free_fcn;
}

class XML_Encoding extends ffi.Struct {
  @ffi.Int32()
  int _unique_map_item_0;
  @ffi.Int32()
  int _unique_map_item_1;
  @ffi.Int32()
  int _unique_map_item_2;
  @ffi.Int32()
  int _unique_map_item_3;
  @ffi.Int32()
  int _unique_map_item_4;
  @ffi.Int32()
  int _unique_map_item_5;
  @ffi.Int32()
  int _unique_map_item_6;
  @ffi.Int32()
  int _unique_map_item_7;
  @ffi.Int32()
  int _unique_map_item_8;
  @ffi.Int32()
  int _unique_map_item_9;
  @ffi.Int32()
  int _unique_map_item_10;
  @ffi.Int32()
  int _unique_map_item_11;
  @ffi.Int32()
  int _unique_map_item_12;
  @ffi.Int32()
  int _unique_map_item_13;
  @ffi.Int32()
  int _unique_map_item_14;
  @ffi.Int32()
  int _unique_map_item_15;
  @ffi.Int32()
  int _unique_map_item_16;
  @ffi.Int32()
  int _unique_map_item_17;
  @ffi.Int32()
  int _unique_map_item_18;
  @ffi.Int32()
  int _unique_map_item_19;
  @ffi.Int32()
  int _unique_map_item_20;
  @ffi.Int32()
  int _unique_map_item_21;
  @ffi.Int32()
  int _unique_map_item_22;
  @ffi.Int32()
  int _unique_map_item_23;
  @ffi.Int32()
  int _unique_map_item_24;
  @ffi.Int32()
  int _unique_map_item_25;
  @ffi.Int32()
  int _unique_map_item_26;
  @ffi.Int32()
  int _unique_map_item_27;
  @ffi.Int32()
  int _unique_map_item_28;
  @ffi.Int32()
  int _unique_map_item_29;
  @ffi.Int32()
  int _unique_map_item_30;
  @ffi.Int32()
  int _unique_map_item_31;
  @ffi.Int32()
  int _unique_map_item_32;
  @ffi.Int32()
  int _unique_map_item_33;
  @ffi.Int32()
  int _unique_map_item_34;
  @ffi.Int32()
  int _unique_map_item_35;
  @ffi.Int32()
  int _unique_map_item_36;
  @ffi.Int32()
  int _unique_map_item_37;
  @ffi.Int32()
  int _unique_map_item_38;
  @ffi.Int32()
  int _unique_map_item_39;
  @ffi.Int32()
  int _unique_map_item_40;
  @ffi.Int32()
  int _unique_map_item_41;
  @ffi.Int32()
  int _unique_map_item_42;
  @ffi.Int32()
  int _unique_map_item_43;
  @ffi.Int32()
  int _unique_map_item_44;
  @ffi.Int32()
  int _unique_map_item_45;
  @ffi.Int32()
  int _unique_map_item_46;
  @ffi.Int32()
  int _unique_map_item_47;
  @ffi.Int32()
  int _unique_map_item_48;
  @ffi.Int32()
  int _unique_map_item_49;
  @ffi.Int32()
  int _unique_map_item_50;
  @ffi.Int32()
  int _unique_map_item_51;
  @ffi.Int32()
  int _unique_map_item_52;
  @ffi.Int32()
  int _unique_map_item_53;
  @ffi.Int32()
  int _unique_map_item_54;
  @ffi.Int32()
  int _unique_map_item_55;
  @ffi.Int32()
  int _unique_map_item_56;
  @ffi.Int32()
  int _unique_map_item_57;
  @ffi.Int32()
  int _unique_map_item_58;
  @ffi.Int32()
  int _unique_map_item_59;
  @ffi.Int32()
  int _unique_map_item_60;
  @ffi.Int32()
  int _unique_map_item_61;
  @ffi.Int32()
  int _unique_map_item_62;
  @ffi.Int32()
  int _unique_map_item_63;
  @ffi.Int32()
  int _unique_map_item_64;
  @ffi.Int32()
  int _unique_map_item_65;
  @ffi.Int32()
  int _unique_map_item_66;
  @ffi.Int32()
  int _unique_map_item_67;
  @ffi.Int32()
  int _unique_map_item_68;
  @ffi.Int32()
  int _unique_map_item_69;
  @ffi.Int32()
  int _unique_map_item_70;
  @ffi.Int32()
  int _unique_map_item_71;
  @ffi.Int32()
  int _unique_map_item_72;
  @ffi.Int32()
  int _unique_map_item_73;
  @ffi.Int32()
  int _unique_map_item_74;
  @ffi.Int32()
  int _unique_map_item_75;
  @ffi.Int32()
  int _unique_map_item_76;
  @ffi.Int32()
  int _unique_map_item_77;
  @ffi.Int32()
  int _unique_map_item_78;
  @ffi.Int32()
  int _unique_map_item_79;
  @ffi.Int32()
  int _unique_map_item_80;
  @ffi.Int32()
  int _unique_map_item_81;
  @ffi.Int32()
  int _unique_map_item_82;
  @ffi.Int32()
  int _unique_map_item_83;
  @ffi.Int32()
  int _unique_map_item_84;
  @ffi.Int32()
  int _unique_map_item_85;
  @ffi.Int32()
  int _unique_map_item_86;
  @ffi.Int32()
  int _unique_map_item_87;
  @ffi.Int32()
  int _unique_map_item_88;
  @ffi.Int32()
  int _unique_map_item_89;
  @ffi.Int32()
  int _unique_map_item_90;
  @ffi.Int32()
  int _unique_map_item_91;
  @ffi.Int32()
  int _unique_map_item_92;
  @ffi.Int32()
  int _unique_map_item_93;
  @ffi.Int32()
  int _unique_map_item_94;
  @ffi.Int32()
  int _unique_map_item_95;
  @ffi.Int32()
  int _unique_map_item_96;
  @ffi.Int32()
  int _unique_map_item_97;
  @ffi.Int32()
  int _unique_map_item_98;
  @ffi.Int32()
  int _unique_map_item_99;
  @ffi.Int32()
  int _unique_map_item_100;
  @ffi.Int32()
  int _unique_map_item_101;
  @ffi.Int32()
  int _unique_map_item_102;
  @ffi.Int32()
  int _unique_map_item_103;
  @ffi.Int32()
  int _unique_map_item_104;
  @ffi.Int32()
  int _unique_map_item_105;
  @ffi.Int32()
  int _unique_map_item_106;
  @ffi.Int32()
  int _unique_map_item_107;
  @ffi.Int32()
  int _unique_map_item_108;
  @ffi.Int32()
  int _unique_map_item_109;
  @ffi.Int32()
  int _unique_map_item_110;
  @ffi.Int32()
  int _unique_map_item_111;
  @ffi.Int32()
  int _unique_map_item_112;
  @ffi.Int32()
  int _unique_map_item_113;
  @ffi.Int32()
  int _unique_map_item_114;
  @ffi.Int32()
  int _unique_map_item_115;
  @ffi.Int32()
  int _unique_map_item_116;
  @ffi.Int32()
  int _unique_map_item_117;
  @ffi.Int32()
  int _unique_map_item_118;
  @ffi.Int32()
  int _unique_map_item_119;
  @ffi.Int32()
  int _unique_map_item_120;
  @ffi.Int32()
  int _unique_map_item_121;
  @ffi.Int32()
  int _unique_map_item_122;
  @ffi.Int32()
  int _unique_map_item_123;
  @ffi.Int32()
  int _unique_map_item_124;
  @ffi.Int32()
  int _unique_map_item_125;
  @ffi.Int32()
  int _unique_map_item_126;
  @ffi.Int32()
  int _unique_map_item_127;
  @ffi.Int32()
  int _unique_map_item_128;
  @ffi.Int32()
  int _unique_map_item_129;
  @ffi.Int32()
  int _unique_map_item_130;
  @ffi.Int32()
  int _unique_map_item_131;
  @ffi.Int32()
  int _unique_map_item_132;
  @ffi.Int32()
  int _unique_map_item_133;
  @ffi.Int32()
  int _unique_map_item_134;
  @ffi.Int32()
  int _unique_map_item_135;
  @ffi.Int32()
  int _unique_map_item_136;
  @ffi.Int32()
  int _unique_map_item_137;
  @ffi.Int32()
  int _unique_map_item_138;
  @ffi.Int32()
  int _unique_map_item_139;
  @ffi.Int32()
  int _unique_map_item_140;
  @ffi.Int32()
  int _unique_map_item_141;
  @ffi.Int32()
  int _unique_map_item_142;
  @ffi.Int32()
  int _unique_map_item_143;
  @ffi.Int32()
  int _unique_map_item_144;
  @ffi.Int32()
  int _unique_map_item_145;
  @ffi.Int32()
  int _unique_map_item_146;
  @ffi.Int32()
  int _unique_map_item_147;
  @ffi.Int32()
  int _unique_map_item_148;
  @ffi.Int32()
  int _unique_map_item_149;
  @ffi.Int32()
  int _unique_map_item_150;
  @ffi.Int32()
  int _unique_map_item_151;
  @ffi.Int32()
  int _unique_map_item_152;
  @ffi.Int32()
  int _unique_map_item_153;
  @ffi.Int32()
  int _unique_map_item_154;
  @ffi.Int32()
  int _unique_map_item_155;
  @ffi.Int32()
  int _unique_map_item_156;
  @ffi.Int32()
  int _unique_map_item_157;
  @ffi.Int32()
  int _unique_map_item_158;
  @ffi.Int32()
  int _unique_map_item_159;
  @ffi.Int32()
  int _unique_map_item_160;
  @ffi.Int32()
  int _unique_map_item_161;
  @ffi.Int32()
  int _unique_map_item_162;
  @ffi.Int32()
  int _unique_map_item_163;
  @ffi.Int32()
  int _unique_map_item_164;
  @ffi.Int32()
  int _unique_map_item_165;
  @ffi.Int32()
  int _unique_map_item_166;
  @ffi.Int32()
  int _unique_map_item_167;
  @ffi.Int32()
  int _unique_map_item_168;
  @ffi.Int32()
  int _unique_map_item_169;
  @ffi.Int32()
  int _unique_map_item_170;
  @ffi.Int32()
  int _unique_map_item_171;
  @ffi.Int32()
  int _unique_map_item_172;
  @ffi.Int32()
  int _unique_map_item_173;
  @ffi.Int32()
  int _unique_map_item_174;
  @ffi.Int32()
  int _unique_map_item_175;
  @ffi.Int32()
  int _unique_map_item_176;
  @ffi.Int32()
  int _unique_map_item_177;
  @ffi.Int32()
  int _unique_map_item_178;
  @ffi.Int32()
  int _unique_map_item_179;
  @ffi.Int32()
  int _unique_map_item_180;
  @ffi.Int32()
  int _unique_map_item_181;
  @ffi.Int32()
  int _unique_map_item_182;
  @ffi.Int32()
  int _unique_map_item_183;
  @ffi.Int32()
  int _unique_map_item_184;
  @ffi.Int32()
  int _unique_map_item_185;
  @ffi.Int32()
  int _unique_map_item_186;
  @ffi.Int32()
  int _unique_map_item_187;
  @ffi.Int32()
  int _unique_map_item_188;
  @ffi.Int32()
  int _unique_map_item_189;
  @ffi.Int32()
  int _unique_map_item_190;
  @ffi.Int32()
  int _unique_map_item_191;
  @ffi.Int32()
  int _unique_map_item_192;
  @ffi.Int32()
  int _unique_map_item_193;
  @ffi.Int32()
  int _unique_map_item_194;
  @ffi.Int32()
  int _unique_map_item_195;
  @ffi.Int32()
  int _unique_map_item_196;
  @ffi.Int32()
  int _unique_map_item_197;
  @ffi.Int32()
  int _unique_map_item_198;
  @ffi.Int32()
  int _unique_map_item_199;
  @ffi.Int32()
  int _unique_map_item_200;
  @ffi.Int32()
  int _unique_map_item_201;
  @ffi.Int32()
  int _unique_map_item_202;
  @ffi.Int32()
  int _unique_map_item_203;
  @ffi.Int32()
  int _unique_map_item_204;
  @ffi.Int32()
  int _unique_map_item_205;
  @ffi.Int32()
  int _unique_map_item_206;
  @ffi.Int32()
  int _unique_map_item_207;
  @ffi.Int32()
  int _unique_map_item_208;
  @ffi.Int32()
  int _unique_map_item_209;
  @ffi.Int32()
  int _unique_map_item_210;
  @ffi.Int32()
  int _unique_map_item_211;
  @ffi.Int32()
  int _unique_map_item_212;
  @ffi.Int32()
  int _unique_map_item_213;
  @ffi.Int32()
  int _unique_map_item_214;
  @ffi.Int32()
  int _unique_map_item_215;
  @ffi.Int32()
  int _unique_map_item_216;
  @ffi.Int32()
  int _unique_map_item_217;
  @ffi.Int32()
  int _unique_map_item_218;
  @ffi.Int32()
  int _unique_map_item_219;
  @ffi.Int32()
  int _unique_map_item_220;
  @ffi.Int32()
  int _unique_map_item_221;
  @ffi.Int32()
  int _unique_map_item_222;
  @ffi.Int32()
  int _unique_map_item_223;
  @ffi.Int32()
  int _unique_map_item_224;
  @ffi.Int32()
  int _unique_map_item_225;
  @ffi.Int32()
  int _unique_map_item_226;
  @ffi.Int32()
  int _unique_map_item_227;
  @ffi.Int32()
  int _unique_map_item_228;
  @ffi.Int32()
  int _unique_map_item_229;
  @ffi.Int32()
  int _unique_map_item_230;
  @ffi.Int32()
  int _unique_map_item_231;
  @ffi.Int32()
  int _unique_map_item_232;
  @ffi.Int32()
  int _unique_map_item_233;
  @ffi.Int32()
  int _unique_map_item_234;
  @ffi.Int32()
  int _unique_map_item_235;
  @ffi.Int32()
  int _unique_map_item_236;
  @ffi.Int32()
  int _unique_map_item_237;
  @ffi.Int32()
  int _unique_map_item_238;
  @ffi.Int32()
  int _unique_map_item_239;
  @ffi.Int32()
  int _unique_map_item_240;
  @ffi.Int32()
  int _unique_map_item_241;
  @ffi.Int32()
  int _unique_map_item_242;
  @ffi.Int32()
  int _unique_map_item_243;
  @ffi.Int32()
  int _unique_map_item_244;
  @ffi.Int32()
  int _unique_map_item_245;
  @ffi.Int32()
  int _unique_map_item_246;
  @ffi.Int32()
  int _unique_map_item_247;
  @ffi.Int32()
  int _unique_map_item_248;
  @ffi.Int32()
  int _unique_map_item_249;
  @ffi.Int32()
  int _unique_map_item_250;
  @ffi.Int32()
  int _unique_map_item_251;
  @ffi.Int32()
  int _unique_map_item_252;
  @ffi.Int32()
  int _unique_map_item_253;
  @ffi.Int32()
  int _unique_map_item_254;
  @ffi.Int32()
  int _unique_map_item_255;

  /// Helper for array `map`.
  ArrayHelper_XML_Encoding_map_level0 get map =>
      ArrayHelper_XML_Encoding_map_level0(this, [256], 0, 0);
  ffi.Pointer<ffi.Void> data;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> convert;

  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> release;
}

/// Helper for array `map` in struct `XML_Encoding`.
class ArrayHelper_XML_Encoding_map_level0 {
  final XML_Encoding _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_XML_Encoding_map_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_map_item_0;
      case 1:
        return _struct._unique_map_item_1;
      case 2:
        return _struct._unique_map_item_2;
      case 3:
        return _struct._unique_map_item_3;
      case 4:
        return _struct._unique_map_item_4;
      case 5:
        return _struct._unique_map_item_5;
      case 6:
        return _struct._unique_map_item_6;
      case 7:
        return _struct._unique_map_item_7;
      case 8:
        return _struct._unique_map_item_8;
      case 9:
        return _struct._unique_map_item_9;
      case 10:
        return _struct._unique_map_item_10;
      case 11:
        return _struct._unique_map_item_11;
      case 12:
        return _struct._unique_map_item_12;
      case 13:
        return _struct._unique_map_item_13;
      case 14:
        return _struct._unique_map_item_14;
      case 15:
        return _struct._unique_map_item_15;
      case 16:
        return _struct._unique_map_item_16;
      case 17:
        return _struct._unique_map_item_17;
      case 18:
        return _struct._unique_map_item_18;
      case 19:
        return _struct._unique_map_item_19;
      case 20:
        return _struct._unique_map_item_20;
      case 21:
        return _struct._unique_map_item_21;
      case 22:
        return _struct._unique_map_item_22;
      case 23:
        return _struct._unique_map_item_23;
      case 24:
        return _struct._unique_map_item_24;
      case 25:
        return _struct._unique_map_item_25;
      case 26:
        return _struct._unique_map_item_26;
      case 27:
        return _struct._unique_map_item_27;
      case 28:
        return _struct._unique_map_item_28;
      case 29:
        return _struct._unique_map_item_29;
      case 30:
        return _struct._unique_map_item_30;
      case 31:
        return _struct._unique_map_item_31;
      case 32:
        return _struct._unique_map_item_32;
      case 33:
        return _struct._unique_map_item_33;
      case 34:
        return _struct._unique_map_item_34;
      case 35:
        return _struct._unique_map_item_35;
      case 36:
        return _struct._unique_map_item_36;
      case 37:
        return _struct._unique_map_item_37;
      case 38:
        return _struct._unique_map_item_38;
      case 39:
        return _struct._unique_map_item_39;
      case 40:
        return _struct._unique_map_item_40;
      case 41:
        return _struct._unique_map_item_41;
      case 42:
        return _struct._unique_map_item_42;
      case 43:
        return _struct._unique_map_item_43;
      case 44:
        return _struct._unique_map_item_44;
      case 45:
        return _struct._unique_map_item_45;
      case 46:
        return _struct._unique_map_item_46;
      case 47:
        return _struct._unique_map_item_47;
      case 48:
        return _struct._unique_map_item_48;
      case 49:
        return _struct._unique_map_item_49;
      case 50:
        return _struct._unique_map_item_50;
      case 51:
        return _struct._unique_map_item_51;
      case 52:
        return _struct._unique_map_item_52;
      case 53:
        return _struct._unique_map_item_53;
      case 54:
        return _struct._unique_map_item_54;
      case 55:
        return _struct._unique_map_item_55;
      case 56:
        return _struct._unique_map_item_56;
      case 57:
        return _struct._unique_map_item_57;
      case 58:
        return _struct._unique_map_item_58;
      case 59:
        return _struct._unique_map_item_59;
      case 60:
        return _struct._unique_map_item_60;
      case 61:
        return _struct._unique_map_item_61;
      case 62:
        return _struct._unique_map_item_62;
      case 63:
        return _struct._unique_map_item_63;
      case 64:
        return _struct._unique_map_item_64;
      case 65:
        return _struct._unique_map_item_65;
      case 66:
        return _struct._unique_map_item_66;
      case 67:
        return _struct._unique_map_item_67;
      case 68:
        return _struct._unique_map_item_68;
      case 69:
        return _struct._unique_map_item_69;
      case 70:
        return _struct._unique_map_item_70;
      case 71:
        return _struct._unique_map_item_71;
      case 72:
        return _struct._unique_map_item_72;
      case 73:
        return _struct._unique_map_item_73;
      case 74:
        return _struct._unique_map_item_74;
      case 75:
        return _struct._unique_map_item_75;
      case 76:
        return _struct._unique_map_item_76;
      case 77:
        return _struct._unique_map_item_77;
      case 78:
        return _struct._unique_map_item_78;
      case 79:
        return _struct._unique_map_item_79;
      case 80:
        return _struct._unique_map_item_80;
      case 81:
        return _struct._unique_map_item_81;
      case 82:
        return _struct._unique_map_item_82;
      case 83:
        return _struct._unique_map_item_83;
      case 84:
        return _struct._unique_map_item_84;
      case 85:
        return _struct._unique_map_item_85;
      case 86:
        return _struct._unique_map_item_86;
      case 87:
        return _struct._unique_map_item_87;
      case 88:
        return _struct._unique_map_item_88;
      case 89:
        return _struct._unique_map_item_89;
      case 90:
        return _struct._unique_map_item_90;
      case 91:
        return _struct._unique_map_item_91;
      case 92:
        return _struct._unique_map_item_92;
      case 93:
        return _struct._unique_map_item_93;
      case 94:
        return _struct._unique_map_item_94;
      case 95:
        return _struct._unique_map_item_95;
      case 96:
        return _struct._unique_map_item_96;
      case 97:
        return _struct._unique_map_item_97;
      case 98:
        return _struct._unique_map_item_98;
      case 99:
        return _struct._unique_map_item_99;
      case 100:
        return _struct._unique_map_item_100;
      case 101:
        return _struct._unique_map_item_101;
      case 102:
        return _struct._unique_map_item_102;
      case 103:
        return _struct._unique_map_item_103;
      case 104:
        return _struct._unique_map_item_104;
      case 105:
        return _struct._unique_map_item_105;
      case 106:
        return _struct._unique_map_item_106;
      case 107:
        return _struct._unique_map_item_107;
      case 108:
        return _struct._unique_map_item_108;
      case 109:
        return _struct._unique_map_item_109;
      case 110:
        return _struct._unique_map_item_110;
      case 111:
        return _struct._unique_map_item_111;
      case 112:
        return _struct._unique_map_item_112;
      case 113:
        return _struct._unique_map_item_113;
      case 114:
        return _struct._unique_map_item_114;
      case 115:
        return _struct._unique_map_item_115;
      case 116:
        return _struct._unique_map_item_116;
      case 117:
        return _struct._unique_map_item_117;
      case 118:
        return _struct._unique_map_item_118;
      case 119:
        return _struct._unique_map_item_119;
      case 120:
        return _struct._unique_map_item_120;
      case 121:
        return _struct._unique_map_item_121;
      case 122:
        return _struct._unique_map_item_122;
      case 123:
        return _struct._unique_map_item_123;
      case 124:
        return _struct._unique_map_item_124;
      case 125:
        return _struct._unique_map_item_125;
      case 126:
        return _struct._unique_map_item_126;
      case 127:
        return _struct._unique_map_item_127;
      case 128:
        return _struct._unique_map_item_128;
      case 129:
        return _struct._unique_map_item_129;
      case 130:
        return _struct._unique_map_item_130;
      case 131:
        return _struct._unique_map_item_131;
      case 132:
        return _struct._unique_map_item_132;
      case 133:
        return _struct._unique_map_item_133;
      case 134:
        return _struct._unique_map_item_134;
      case 135:
        return _struct._unique_map_item_135;
      case 136:
        return _struct._unique_map_item_136;
      case 137:
        return _struct._unique_map_item_137;
      case 138:
        return _struct._unique_map_item_138;
      case 139:
        return _struct._unique_map_item_139;
      case 140:
        return _struct._unique_map_item_140;
      case 141:
        return _struct._unique_map_item_141;
      case 142:
        return _struct._unique_map_item_142;
      case 143:
        return _struct._unique_map_item_143;
      case 144:
        return _struct._unique_map_item_144;
      case 145:
        return _struct._unique_map_item_145;
      case 146:
        return _struct._unique_map_item_146;
      case 147:
        return _struct._unique_map_item_147;
      case 148:
        return _struct._unique_map_item_148;
      case 149:
        return _struct._unique_map_item_149;
      case 150:
        return _struct._unique_map_item_150;
      case 151:
        return _struct._unique_map_item_151;
      case 152:
        return _struct._unique_map_item_152;
      case 153:
        return _struct._unique_map_item_153;
      case 154:
        return _struct._unique_map_item_154;
      case 155:
        return _struct._unique_map_item_155;
      case 156:
        return _struct._unique_map_item_156;
      case 157:
        return _struct._unique_map_item_157;
      case 158:
        return _struct._unique_map_item_158;
      case 159:
        return _struct._unique_map_item_159;
      case 160:
        return _struct._unique_map_item_160;
      case 161:
        return _struct._unique_map_item_161;
      case 162:
        return _struct._unique_map_item_162;
      case 163:
        return _struct._unique_map_item_163;
      case 164:
        return _struct._unique_map_item_164;
      case 165:
        return _struct._unique_map_item_165;
      case 166:
        return _struct._unique_map_item_166;
      case 167:
        return _struct._unique_map_item_167;
      case 168:
        return _struct._unique_map_item_168;
      case 169:
        return _struct._unique_map_item_169;
      case 170:
        return _struct._unique_map_item_170;
      case 171:
        return _struct._unique_map_item_171;
      case 172:
        return _struct._unique_map_item_172;
      case 173:
        return _struct._unique_map_item_173;
      case 174:
        return _struct._unique_map_item_174;
      case 175:
        return _struct._unique_map_item_175;
      case 176:
        return _struct._unique_map_item_176;
      case 177:
        return _struct._unique_map_item_177;
      case 178:
        return _struct._unique_map_item_178;
      case 179:
        return _struct._unique_map_item_179;
      case 180:
        return _struct._unique_map_item_180;
      case 181:
        return _struct._unique_map_item_181;
      case 182:
        return _struct._unique_map_item_182;
      case 183:
        return _struct._unique_map_item_183;
      case 184:
        return _struct._unique_map_item_184;
      case 185:
        return _struct._unique_map_item_185;
      case 186:
        return _struct._unique_map_item_186;
      case 187:
        return _struct._unique_map_item_187;
      case 188:
        return _struct._unique_map_item_188;
      case 189:
        return _struct._unique_map_item_189;
      case 190:
        return _struct._unique_map_item_190;
      case 191:
        return _struct._unique_map_item_191;
      case 192:
        return _struct._unique_map_item_192;
      case 193:
        return _struct._unique_map_item_193;
      case 194:
        return _struct._unique_map_item_194;
      case 195:
        return _struct._unique_map_item_195;
      case 196:
        return _struct._unique_map_item_196;
      case 197:
        return _struct._unique_map_item_197;
      case 198:
        return _struct._unique_map_item_198;
      case 199:
        return _struct._unique_map_item_199;
      case 200:
        return _struct._unique_map_item_200;
      case 201:
        return _struct._unique_map_item_201;
      case 202:
        return _struct._unique_map_item_202;
      case 203:
        return _struct._unique_map_item_203;
      case 204:
        return _struct._unique_map_item_204;
      case 205:
        return _struct._unique_map_item_205;
      case 206:
        return _struct._unique_map_item_206;
      case 207:
        return _struct._unique_map_item_207;
      case 208:
        return _struct._unique_map_item_208;
      case 209:
        return _struct._unique_map_item_209;
      case 210:
        return _struct._unique_map_item_210;
      case 211:
        return _struct._unique_map_item_211;
      case 212:
        return _struct._unique_map_item_212;
      case 213:
        return _struct._unique_map_item_213;
      case 214:
        return _struct._unique_map_item_214;
      case 215:
        return _struct._unique_map_item_215;
      case 216:
        return _struct._unique_map_item_216;
      case 217:
        return _struct._unique_map_item_217;
      case 218:
        return _struct._unique_map_item_218;
      case 219:
        return _struct._unique_map_item_219;
      case 220:
        return _struct._unique_map_item_220;
      case 221:
        return _struct._unique_map_item_221;
      case 222:
        return _struct._unique_map_item_222;
      case 223:
        return _struct._unique_map_item_223;
      case 224:
        return _struct._unique_map_item_224;
      case 225:
        return _struct._unique_map_item_225;
      case 226:
        return _struct._unique_map_item_226;
      case 227:
        return _struct._unique_map_item_227;
      case 228:
        return _struct._unique_map_item_228;
      case 229:
        return _struct._unique_map_item_229;
      case 230:
        return _struct._unique_map_item_230;
      case 231:
        return _struct._unique_map_item_231;
      case 232:
        return _struct._unique_map_item_232;
      case 233:
        return _struct._unique_map_item_233;
      case 234:
        return _struct._unique_map_item_234;
      case 235:
        return _struct._unique_map_item_235;
      case 236:
        return _struct._unique_map_item_236;
      case 237:
        return _struct._unique_map_item_237;
      case 238:
        return _struct._unique_map_item_238;
      case 239:
        return _struct._unique_map_item_239;
      case 240:
        return _struct._unique_map_item_240;
      case 241:
        return _struct._unique_map_item_241;
      case 242:
        return _struct._unique_map_item_242;
      case 243:
        return _struct._unique_map_item_243;
      case 244:
        return _struct._unique_map_item_244;
      case 245:
        return _struct._unique_map_item_245;
      case 246:
        return _struct._unique_map_item_246;
      case 247:
        return _struct._unique_map_item_247;
      case 248:
        return _struct._unique_map_item_248;
      case 249:
        return _struct._unique_map_item_249;
      case 250:
        return _struct._unique_map_item_250;
      case 251:
        return _struct._unique_map_item_251;
      case 252:
        return _struct._unique_map_item_252;
      case 253:
        return _struct._unique_map_item_253;
      case 254:
        return _struct._unique_map_item_254;
      case 255:
        return _struct._unique_map_item_255;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_map_item_0 = value;
        break;
      case 1:
        _struct._unique_map_item_1 = value;
        break;
      case 2:
        _struct._unique_map_item_2 = value;
        break;
      case 3:
        _struct._unique_map_item_3 = value;
        break;
      case 4:
        _struct._unique_map_item_4 = value;
        break;
      case 5:
        _struct._unique_map_item_5 = value;
        break;
      case 6:
        _struct._unique_map_item_6 = value;
        break;
      case 7:
        _struct._unique_map_item_7 = value;
        break;
      case 8:
        _struct._unique_map_item_8 = value;
        break;
      case 9:
        _struct._unique_map_item_9 = value;
        break;
      case 10:
        _struct._unique_map_item_10 = value;
        break;
      case 11:
        _struct._unique_map_item_11 = value;
        break;
      case 12:
        _struct._unique_map_item_12 = value;
        break;
      case 13:
        _struct._unique_map_item_13 = value;
        break;
      case 14:
        _struct._unique_map_item_14 = value;
        break;
      case 15:
        _struct._unique_map_item_15 = value;
        break;
      case 16:
        _struct._unique_map_item_16 = value;
        break;
      case 17:
        _struct._unique_map_item_17 = value;
        break;
      case 18:
        _struct._unique_map_item_18 = value;
        break;
      case 19:
        _struct._unique_map_item_19 = value;
        break;
      case 20:
        _struct._unique_map_item_20 = value;
        break;
      case 21:
        _struct._unique_map_item_21 = value;
        break;
      case 22:
        _struct._unique_map_item_22 = value;
        break;
      case 23:
        _struct._unique_map_item_23 = value;
        break;
      case 24:
        _struct._unique_map_item_24 = value;
        break;
      case 25:
        _struct._unique_map_item_25 = value;
        break;
      case 26:
        _struct._unique_map_item_26 = value;
        break;
      case 27:
        _struct._unique_map_item_27 = value;
        break;
      case 28:
        _struct._unique_map_item_28 = value;
        break;
      case 29:
        _struct._unique_map_item_29 = value;
        break;
      case 30:
        _struct._unique_map_item_30 = value;
        break;
      case 31:
        _struct._unique_map_item_31 = value;
        break;
      case 32:
        _struct._unique_map_item_32 = value;
        break;
      case 33:
        _struct._unique_map_item_33 = value;
        break;
      case 34:
        _struct._unique_map_item_34 = value;
        break;
      case 35:
        _struct._unique_map_item_35 = value;
        break;
      case 36:
        _struct._unique_map_item_36 = value;
        break;
      case 37:
        _struct._unique_map_item_37 = value;
        break;
      case 38:
        _struct._unique_map_item_38 = value;
        break;
      case 39:
        _struct._unique_map_item_39 = value;
        break;
      case 40:
        _struct._unique_map_item_40 = value;
        break;
      case 41:
        _struct._unique_map_item_41 = value;
        break;
      case 42:
        _struct._unique_map_item_42 = value;
        break;
      case 43:
        _struct._unique_map_item_43 = value;
        break;
      case 44:
        _struct._unique_map_item_44 = value;
        break;
      case 45:
        _struct._unique_map_item_45 = value;
        break;
      case 46:
        _struct._unique_map_item_46 = value;
        break;
      case 47:
        _struct._unique_map_item_47 = value;
        break;
      case 48:
        _struct._unique_map_item_48 = value;
        break;
      case 49:
        _struct._unique_map_item_49 = value;
        break;
      case 50:
        _struct._unique_map_item_50 = value;
        break;
      case 51:
        _struct._unique_map_item_51 = value;
        break;
      case 52:
        _struct._unique_map_item_52 = value;
        break;
      case 53:
        _struct._unique_map_item_53 = value;
        break;
      case 54:
        _struct._unique_map_item_54 = value;
        break;
      case 55:
        _struct._unique_map_item_55 = value;
        break;
      case 56:
        _struct._unique_map_item_56 = value;
        break;
      case 57:
        _struct._unique_map_item_57 = value;
        break;
      case 58:
        _struct._unique_map_item_58 = value;
        break;
      case 59:
        _struct._unique_map_item_59 = value;
        break;
      case 60:
        _struct._unique_map_item_60 = value;
        break;
      case 61:
        _struct._unique_map_item_61 = value;
        break;
      case 62:
        _struct._unique_map_item_62 = value;
        break;
      case 63:
        _struct._unique_map_item_63 = value;
        break;
      case 64:
        _struct._unique_map_item_64 = value;
        break;
      case 65:
        _struct._unique_map_item_65 = value;
        break;
      case 66:
        _struct._unique_map_item_66 = value;
        break;
      case 67:
        _struct._unique_map_item_67 = value;
        break;
      case 68:
        _struct._unique_map_item_68 = value;
        break;
      case 69:
        _struct._unique_map_item_69 = value;
        break;
      case 70:
        _struct._unique_map_item_70 = value;
        break;
      case 71:
        _struct._unique_map_item_71 = value;
        break;
      case 72:
        _struct._unique_map_item_72 = value;
        break;
      case 73:
        _struct._unique_map_item_73 = value;
        break;
      case 74:
        _struct._unique_map_item_74 = value;
        break;
      case 75:
        _struct._unique_map_item_75 = value;
        break;
      case 76:
        _struct._unique_map_item_76 = value;
        break;
      case 77:
        _struct._unique_map_item_77 = value;
        break;
      case 78:
        _struct._unique_map_item_78 = value;
        break;
      case 79:
        _struct._unique_map_item_79 = value;
        break;
      case 80:
        _struct._unique_map_item_80 = value;
        break;
      case 81:
        _struct._unique_map_item_81 = value;
        break;
      case 82:
        _struct._unique_map_item_82 = value;
        break;
      case 83:
        _struct._unique_map_item_83 = value;
        break;
      case 84:
        _struct._unique_map_item_84 = value;
        break;
      case 85:
        _struct._unique_map_item_85 = value;
        break;
      case 86:
        _struct._unique_map_item_86 = value;
        break;
      case 87:
        _struct._unique_map_item_87 = value;
        break;
      case 88:
        _struct._unique_map_item_88 = value;
        break;
      case 89:
        _struct._unique_map_item_89 = value;
        break;
      case 90:
        _struct._unique_map_item_90 = value;
        break;
      case 91:
        _struct._unique_map_item_91 = value;
        break;
      case 92:
        _struct._unique_map_item_92 = value;
        break;
      case 93:
        _struct._unique_map_item_93 = value;
        break;
      case 94:
        _struct._unique_map_item_94 = value;
        break;
      case 95:
        _struct._unique_map_item_95 = value;
        break;
      case 96:
        _struct._unique_map_item_96 = value;
        break;
      case 97:
        _struct._unique_map_item_97 = value;
        break;
      case 98:
        _struct._unique_map_item_98 = value;
        break;
      case 99:
        _struct._unique_map_item_99 = value;
        break;
      case 100:
        _struct._unique_map_item_100 = value;
        break;
      case 101:
        _struct._unique_map_item_101 = value;
        break;
      case 102:
        _struct._unique_map_item_102 = value;
        break;
      case 103:
        _struct._unique_map_item_103 = value;
        break;
      case 104:
        _struct._unique_map_item_104 = value;
        break;
      case 105:
        _struct._unique_map_item_105 = value;
        break;
      case 106:
        _struct._unique_map_item_106 = value;
        break;
      case 107:
        _struct._unique_map_item_107 = value;
        break;
      case 108:
        _struct._unique_map_item_108 = value;
        break;
      case 109:
        _struct._unique_map_item_109 = value;
        break;
      case 110:
        _struct._unique_map_item_110 = value;
        break;
      case 111:
        _struct._unique_map_item_111 = value;
        break;
      case 112:
        _struct._unique_map_item_112 = value;
        break;
      case 113:
        _struct._unique_map_item_113 = value;
        break;
      case 114:
        _struct._unique_map_item_114 = value;
        break;
      case 115:
        _struct._unique_map_item_115 = value;
        break;
      case 116:
        _struct._unique_map_item_116 = value;
        break;
      case 117:
        _struct._unique_map_item_117 = value;
        break;
      case 118:
        _struct._unique_map_item_118 = value;
        break;
      case 119:
        _struct._unique_map_item_119 = value;
        break;
      case 120:
        _struct._unique_map_item_120 = value;
        break;
      case 121:
        _struct._unique_map_item_121 = value;
        break;
      case 122:
        _struct._unique_map_item_122 = value;
        break;
      case 123:
        _struct._unique_map_item_123 = value;
        break;
      case 124:
        _struct._unique_map_item_124 = value;
        break;
      case 125:
        _struct._unique_map_item_125 = value;
        break;
      case 126:
        _struct._unique_map_item_126 = value;
        break;
      case 127:
        _struct._unique_map_item_127 = value;
        break;
      case 128:
        _struct._unique_map_item_128 = value;
        break;
      case 129:
        _struct._unique_map_item_129 = value;
        break;
      case 130:
        _struct._unique_map_item_130 = value;
        break;
      case 131:
        _struct._unique_map_item_131 = value;
        break;
      case 132:
        _struct._unique_map_item_132 = value;
        break;
      case 133:
        _struct._unique_map_item_133 = value;
        break;
      case 134:
        _struct._unique_map_item_134 = value;
        break;
      case 135:
        _struct._unique_map_item_135 = value;
        break;
      case 136:
        _struct._unique_map_item_136 = value;
        break;
      case 137:
        _struct._unique_map_item_137 = value;
        break;
      case 138:
        _struct._unique_map_item_138 = value;
        break;
      case 139:
        _struct._unique_map_item_139 = value;
        break;
      case 140:
        _struct._unique_map_item_140 = value;
        break;
      case 141:
        _struct._unique_map_item_141 = value;
        break;
      case 142:
        _struct._unique_map_item_142 = value;
        break;
      case 143:
        _struct._unique_map_item_143 = value;
        break;
      case 144:
        _struct._unique_map_item_144 = value;
        break;
      case 145:
        _struct._unique_map_item_145 = value;
        break;
      case 146:
        _struct._unique_map_item_146 = value;
        break;
      case 147:
        _struct._unique_map_item_147 = value;
        break;
      case 148:
        _struct._unique_map_item_148 = value;
        break;
      case 149:
        _struct._unique_map_item_149 = value;
        break;
      case 150:
        _struct._unique_map_item_150 = value;
        break;
      case 151:
        _struct._unique_map_item_151 = value;
        break;
      case 152:
        _struct._unique_map_item_152 = value;
        break;
      case 153:
        _struct._unique_map_item_153 = value;
        break;
      case 154:
        _struct._unique_map_item_154 = value;
        break;
      case 155:
        _struct._unique_map_item_155 = value;
        break;
      case 156:
        _struct._unique_map_item_156 = value;
        break;
      case 157:
        _struct._unique_map_item_157 = value;
        break;
      case 158:
        _struct._unique_map_item_158 = value;
        break;
      case 159:
        _struct._unique_map_item_159 = value;
        break;
      case 160:
        _struct._unique_map_item_160 = value;
        break;
      case 161:
        _struct._unique_map_item_161 = value;
        break;
      case 162:
        _struct._unique_map_item_162 = value;
        break;
      case 163:
        _struct._unique_map_item_163 = value;
        break;
      case 164:
        _struct._unique_map_item_164 = value;
        break;
      case 165:
        _struct._unique_map_item_165 = value;
        break;
      case 166:
        _struct._unique_map_item_166 = value;
        break;
      case 167:
        _struct._unique_map_item_167 = value;
        break;
      case 168:
        _struct._unique_map_item_168 = value;
        break;
      case 169:
        _struct._unique_map_item_169 = value;
        break;
      case 170:
        _struct._unique_map_item_170 = value;
        break;
      case 171:
        _struct._unique_map_item_171 = value;
        break;
      case 172:
        _struct._unique_map_item_172 = value;
        break;
      case 173:
        _struct._unique_map_item_173 = value;
        break;
      case 174:
        _struct._unique_map_item_174 = value;
        break;
      case 175:
        _struct._unique_map_item_175 = value;
        break;
      case 176:
        _struct._unique_map_item_176 = value;
        break;
      case 177:
        _struct._unique_map_item_177 = value;
        break;
      case 178:
        _struct._unique_map_item_178 = value;
        break;
      case 179:
        _struct._unique_map_item_179 = value;
        break;
      case 180:
        _struct._unique_map_item_180 = value;
        break;
      case 181:
        _struct._unique_map_item_181 = value;
        break;
      case 182:
        _struct._unique_map_item_182 = value;
        break;
      case 183:
        _struct._unique_map_item_183 = value;
        break;
      case 184:
        _struct._unique_map_item_184 = value;
        break;
      case 185:
        _struct._unique_map_item_185 = value;
        break;
      case 186:
        _struct._unique_map_item_186 = value;
        break;
      case 187:
        _struct._unique_map_item_187 = value;
        break;
      case 188:
        _struct._unique_map_item_188 = value;
        break;
      case 189:
        _struct._unique_map_item_189 = value;
        break;
      case 190:
        _struct._unique_map_item_190 = value;
        break;
      case 191:
        _struct._unique_map_item_191 = value;
        break;
      case 192:
        _struct._unique_map_item_192 = value;
        break;
      case 193:
        _struct._unique_map_item_193 = value;
        break;
      case 194:
        _struct._unique_map_item_194 = value;
        break;
      case 195:
        _struct._unique_map_item_195 = value;
        break;
      case 196:
        _struct._unique_map_item_196 = value;
        break;
      case 197:
        _struct._unique_map_item_197 = value;
        break;
      case 198:
        _struct._unique_map_item_198 = value;
        break;
      case 199:
        _struct._unique_map_item_199 = value;
        break;
      case 200:
        _struct._unique_map_item_200 = value;
        break;
      case 201:
        _struct._unique_map_item_201 = value;
        break;
      case 202:
        _struct._unique_map_item_202 = value;
        break;
      case 203:
        _struct._unique_map_item_203 = value;
        break;
      case 204:
        _struct._unique_map_item_204 = value;
        break;
      case 205:
        _struct._unique_map_item_205 = value;
        break;
      case 206:
        _struct._unique_map_item_206 = value;
        break;
      case 207:
        _struct._unique_map_item_207 = value;
        break;
      case 208:
        _struct._unique_map_item_208 = value;
        break;
      case 209:
        _struct._unique_map_item_209 = value;
        break;
      case 210:
        _struct._unique_map_item_210 = value;
        break;
      case 211:
        _struct._unique_map_item_211 = value;
        break;
      case 212:
        _struct._unique_map_item_212 = value;
        break;
      case 213:
        _struct._unique_map_item_213 = value;
        break;
      case 214:
        _struct._unique_map_item_214 = value;
        break;
      case 215:
        _struct._unique_map_item_215 = value;
        break;
      case 216:
        _struct._unique_map_item_216 = value;
        break;
      case 217:
        _struct._unique_map_item_217 = value;
        break;
      case 218:
        _struct._unique_map_item_218 = value;
        break;
      case 219:
        _struct._unique_map_item_219 = value;
        break;
      case 220:
        _struct._unique_map_item_220 = value;
        break;
      case 221:
        _struct._unique_map_item_221 = value;
        break;
      case 222:
        _struct._unique_map_item_222 = value;
        break;
      case 223:
        _struct._unique_map_item_223 = value;
        break;
      case 224:
        _struct._unique_map_item_224 = value;
        break;
      case 225:
        _struct._unique_map_item_225 = value;
        break;
      case 226:
        _struct._unique_map_item_226 = value;
        break;
      case 227:
        _struct._unique_map_item_227 = value;
        break;
      case 228:
        _struct._unique_map_item_228 = value;
        break;
      case 229:
        _struct._unique_map_item_229 = value;
        break;
      case 230:
        _struct._unique_map_item_230 = value;
        break;
      case 231:
        _struct._unique_map_item_231 = value;
        break;
      case 232:
        _struct._unique_map_item_232 = value;
        break;
      case 233:
        _struct._unique_map_item_233 = value;
        break;
      case 234:
        _struct._unique_map_item_234 = value;
        break;
      case 235:
        _struct._unique_map_item_235 = value;
        break;
      case 236:
        _struct._unique_map_item_236 = value;
        break;
      case 237:
        _struct._unique_map_item_237 = value;
        break;
      case 238:
        _struct._unique_map_item_238 = value;
        break;
      case 239:
        _struct._unique_map_item_239 = value;
        break;
      case 240:
        _struct._unique_map_item_240 = value;
        break;
      case 241:
        _struct._unique_map_item_241 = value;
        break;
      case 242:
        _struct._unique_map_item_242 = value;
        break;
      case 243:
        _struct._unique_map_item_243 = value;
        break;
      case 244:
        _struct._unique_map_item_244 = value;
        break;
      case 245:
        _struct._unique_map_item_245 = value;
        break;
      case 246:
        _struct._unique_map_item_246 = value;
        break;
      case 247:
        _struct._unique_map_item_247 = value;
        break;
      case 248:
        _struct._unique_map_item_248 = value;
        break;
      case 249:
        _struct._unique_map_item_249 = value;
        break;
      case 250:
        _struct._unique_map_item_250 = value;
        break;
      case 251:
        _struct._unique_map_item_251 = value;
        break;
      case 252:
        _struct._unique_map_item_252 = value;
        break;
      case 253:
        _struct._unique_map_item_253 = value;
        break;
      case 254:
        _struct._unique_map_item_254 = value;
        break;
      case 255:
        _struct._unique_map_item_255 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

abstract class XML_Parsing {
  static const int XML_INITIALIZED = 0;
  static const int XML_PARSING = 1;
  static const int XML_FINISHED = 2;
  static const int XML_SUSPENDED = 3;
}

class XML_ParsingStatus extends ffi.Struct {
  @ffi.Int32()
  int parsing;

  @ffi.Uint8()
  int finalBuffer;
}

abstract class XML_ParamEntityParsing {
  static const int XML_PARAM_ENTITY_PARSING_NEVER = 0;
  static const int XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE = 1;
  static const int XML_PARAM_ENTITY_PARSING_ALWAYS = 2;
}

class XML_Expat_Version extends ffi.Struct {
  @ffi.Int32()
  int major;

  @ffi.Int32()
  int minor;

  @ffi.Int32()
  int micro;
}

abstract class XML_FeatureEnum {
  static const int XML_FEATURE_END = 0;
  static const int XML_FEATURE_UNICODE = 1;
  static const int XML_FEATURE_UNICODE_WCHAR_T = 2;
  static const int XML_FEATURE_DTD = 3;
  static const int XML_FEATURE_CONTEXT_BYTES = 4;
  static const int XML_FEATURE_MIN_SIZE = 5;
  static const int XML_FEATURE_SIZEOF_XML_CHAR = 6;
  static const int XML_FEATURE_SIZEOF_XML_LCHAR = 7;
  static const int XML_FEATURE_NS = 8;
  static const int XML_FEATURE_LARGE_SIZE = 9;
  static const int XML_FEATURE_ATTR_INFO = 10;
}

class XML_Feature extends ffi.Struct {
  @ffi.Int32()
  int feature;

  ffi.Pointer<ffi.Int8> name;

  @ffi.Int64()
  int value;
}

const int XML_ENABLE_VISIBILITY = 0;

const int XML_TRUE = 1;

const int XML_FALSE = 0;

const int XML_STATUS_ERROR = 0;

const int XML_STATUS_OK = 1;

const int XML_STATUS_SUSPENDED = 2;

const int XML_MAJOR_VERSION = 2;

const int XML_MINOR_VERSION = 2;

const int XML_MICRO_VERSION = 10;

typedef XML_ElementDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<XML_cp>,
);

typedef _c_XML_SetElementDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ElementDeclHandler>> eldecl,
);

typedef _dart_XML_SetElementDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ElementDeclHandler>> eldecl,
);

typedef XML_AttlistDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XML_SetAttlistDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_AttlistDeclHandler>> attdecl,
);

typedef _dart_XML_SetAttlistDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_AttlistDeclHandler>> attdecl,
);

typedef XML_XmlDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XML_SetXmlDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_XmlDeclHandler>> xmldecl,
);

typedef _dart_XML_SetXmlDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_XmlDeclHandler>> xmldecl,
);

typedef _c_XML_ParserCreate = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_XML_ParserCreate = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_XML_ParserCreateNS = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Int8 namespaceSeparator,
);

typedef _dart_XML_ParserCreateNS = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
  int namespaceSeparator,
);

typedef _c_XML_ParserCreate_MM = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<XML_Memory_Handling_Suite> memsuite,
  ffi.Pointer<ffi.Int8> namespaceSeparator,
);

typedef _dart_XML_ParserCreate_MM = ffi.Pointer<XML_ParserStruct> Function(
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<XML_Memory_Handling_Suite> memsuite,
  ffi.Pointer<ffi.Int8> namespaceSeparator,
);

typedef _c_XML_ParserReset = ffi.Uint8 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_XML_ParserReset = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef XML_EntityDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetEntityDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EntityDeclHandler>> handler,
);

typedef _dart_XML_SetEntityDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EntityDeclHandler>> handler,
);

typedef XML_StartElementHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef XML_EndElementHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetElementHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> end,
);

typedef _dart_XML_SetElementHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> end,
);

typedef _c_XML_SetStartElementHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> handler,
);

typedef _dart_XML_SetStartElementHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartElementHandler>> handler,
);

typedef _c_XML_SetEndElementHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> handler,
);

typedef _dart_XML_SetEndElementHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndElementHandler>> handler,
);

typedef XML_CharacterDataHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XML_SetCharacterDataHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_CharacterDataHandler>> handler,
);

typedef _dart_XML_SetCharacterDataHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_CharacterDataHandler>> handler,
);

typedef XML_ProcessingInstructionHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetProcessingInstructionHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ProcessingInstructionHandler>> handler,
);

typedef _dart_XML_SetProcessingInstructionHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ProcessingInstructionHandler>> handler,
);

typedef XML_CommentHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetCommentHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_CommentHandler>> handler,
);

typedef _dart_XML_SetCommentHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_CommentHandler>> handler,
);

typedef XML_StartCdataSectionHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef XML_EndCdataSectionHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_XML_SetCdataSectionHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
);

typedef _dart_XML_SetCdataSectionHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
);

typedef _c_XML_SetStartCdataSectionHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
);

typedef _dart_XML_SetStartCdataSectionHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartCdataSectionHandler>> start,
);

typedef _c_XML_SetEndCdataSectionHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
);

typedef _dart_XML_SetEndCdataSectionHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndCdataSectionHandler>> end,
);

typedef XML_DefaultHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XML_SetDefaultHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
);

typedef _dart_XML_SetDefaultHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
);

typedef _c_XML_SetDefaultHandlerExpand = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
);

typedef _dart_XML_SetDefaultHandlerExpand = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_DefaultHandler>> handler,
);

typedef XML_StartDoctypeDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef XML_EndDoctypeDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_XML_SetDoctypeDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
);

typedef _dart_XML_SetDoctypeDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
);

typedef _c_XML_SetStartDoctypeDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
);

typedef _dart_XML_SetStartDoctypeDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartDoctypeDeclHandler>> start,
);

typedef _c_XML_SetEndDoctypeDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
);

typedef _dart_XML_SetEndDoctypeDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndDoctypeDeclHandler>> end,
);

typedef XML_UnparsedEntityDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetUnparsedEntityDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_UnparsedEntityDeclHandler>> handler,
);

typedef _dart_XML_SetUnparsedEntityDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_UnparsedEntityDeclHandler>> handler,
);

typedef XML_NotationDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetNotationDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_NotationDeclHandler>> handler,
);

typedef _dart_XML_SetNotationDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_NotationDeclHandler>> handler,
);

typedef XML_StartNamespaceDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XML_EndNamespaceDeclHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetNamespaceDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
);

typedef _dart_XML_SetNamespaceDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
  ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
);

typedef _c_XML_SetStartNamespaceDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
);

typedef _dart_XML_SetStartNamespaceDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_StartNamespaceDeclHandler>> start,
);

typedef _c_XML_SetEndNamespaceDeclHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
);

typedef _dart_XML_SetEndNamespaceDeclHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_EndNamespaceDeclHandler>> end,
);

typedef XML_NotStandaloneHandler = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_XML_SetNotStandaloneHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_NotStandaloneHandler>> handler,
);

typedef _dart_XML_SetNotStandaloneHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_NotStandaloneHandler>> handler,
);

typedef XML_ExternalEntityRefHandler = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XML_SetExternalEntityRefHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ExternalEntityRefHandler>> handler,
);

typedef _dart_XML_SetExternalEntityRefHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_ExternalEntityRefHandler>> handler,
);

typedef _c_XML_SetExternalEntityRefHandlerArg = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> arg,
);

typedef _dart_XML_SetExternalEntityRefHandlerArg = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> arg,
);

typedef XML_SkippedEntityHandler = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XML_SetSkippedEntityHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_SkippedEntityHandler>> handler,
);

typedef _dart_XML_SetSkippedEntityHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_SkippedEntityHandler>> handler,
);

typedef XML_UnknownEncodingHandler = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<XML_Encoding>,
);

typedef _c_XML_SetUnknownEncodingHandler = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_UnknownEncodingHandler>> handler,
  ffi.Pointer<ffi.Void> encodingHandlerData,
);

typedef _dart_XML_SetUnknownEncodingHandler = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.NativeFunction<XML_UnknownEncodingHandler>> handler,
  ffi.Pointer<ffi.Void> encodingHandlerData,
);

typedef _c_XML_DefaultCurrent = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_DefaultCurrent = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_SetReturnNSTriplet = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Int32 do_nst,
);

typedef _dart_XML_SetReturnNSTriplet = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int do_nst,
);

typedef _c_XML_SetUserData = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> userData,
);

typedef _dart_XML_SetUserData = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> userData,
);

typedef _c_XML_SetEncoding = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_XML_SetEncoding = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_XML_UseParserAsHandlerArg = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_UseParserAsHandlerArg = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_UseForeignDTD = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Uint8 useDTD,
);

typedef _dart_XML_UseForeignDTD = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int useDTD,
);

typedef _c_XML_SetBase = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> base,
);

typedef _dart_XML_SetBase = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> base,
);

typedef _c_XML_GetBase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetBase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetSpecifiedAttributeCount = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetSpecifiedAttributeCount = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetIdAttributeIndex = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetIdAttributeIndex = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_Parse = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> s,
  ffi.Int32 len,
  ffi.Int32 isFinal,
);

typedef _dart_XML_Parse = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> s,
  int len,
  int isFinal,
);

typedef _c_XML_GetBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Int32 len,
);

typedef _dart_XML_GetBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int len,
);

typedef _c_XML_ParseBuffer = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Int32 len,
  ffi.Int32 isFinal,
);

typedef _dart_XML_ParseBuffer = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int len,
  int isFinal,
);

typedef _c_XML_StopParser = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Uint8 resumable,
);

typedef _dart_XML_StopParser = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int resumable,
);

typedef _c_XML_ResumeParser = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_ResumeParser = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetParsingStatus = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<XML_ParsingStatus> status,
);

typedef _dart_XML_GetParsingStatus = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<XML_ParsingStatus> status,
);

typedef _c_XML_ExternalEntityParserCreate = ffi.Pointer<XML_ParserStruct>
    Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> context,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_XML_ExternalEntityParserCreate = ffi.Pointer<XML_ParserStruct>
    Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int8> context,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_XML_SetParamEntityParsing = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Int32 parsing,
);

typedef _dart_XML_SetParamEntityParsing = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int parsing,
);

typedef _c_XML_SetHashSalt = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Uint64 hash_salt,
);

typedef _dart_XML_SetHashSalt = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int hash_salt,
);

typedef _c_XML_GetErrorCode = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetErrorCode = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetCurrentLineNumber = ffi.Uint64 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetCurrentLineNumber = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetCurrentColumnNumber = ffi.Uint64 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetCurrentColumnNumber = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetCurrentByteIndex = ffi.Int64 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetCurrentByteIndex = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetCurrentByteCount = ffi.Int32 Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_GetCurrentByteCount = int Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_GetInputContext = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int32> offset,
  ffi.Pointer<ffi.Int32> size,
);

typedef _dart_XML_GetInputContext = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Int32> offset,
  ffi.Pointer<ffi.Int32> size,
);

typedef _c_XML_FreeContentModel = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<XML_cp> model,
);

typedef _dart_XML_FreeContentModel = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<XML_cp> model,
);

typedef _c_XML_MemMalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Uint64 size,
);

typedef _dart_XML_MemMalloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  int size,
);

typedef _c_XML_MemRealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> ptr,
  ffi.Uint64 size,
);

typedef _dart_XML_MemRealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> ptr,
  int size,
);

typedef _c_XML_MemFree = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_XML_MemFree = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_XML_ParserFree = ffi.Void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _dart_XML_ParserFree = void Function(
  ffi.Pointer<XML_ParserStruct> parser,
);

typedef _c_XML_ErrorString = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 code,
);

typedef _dart_XML_ErrorString = ffi.Pointer<ffi.Int8> Function(
  int code,
);

typedef _c_XML_ExpatVersion = ffi.Pointer<ffi.Int8> Function();

typedef _dart_XML_ExpatVersion = ffi.Pointer<ffi.Int8> Function();

typedef _c_XML_GetFeatureList = ffi.Pointer<XML_Feature> Function();

typedef _dart_XML_GetFeatureList = ffi.Pointer<XML_Feature> Function();

typedef _typedefC_1 = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
);

typedef _typedefC_2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
